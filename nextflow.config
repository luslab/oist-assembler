includeConfig "luslab-modules/configs/luslab-base.config"

// parameters specified for Mike's OIST workstation
// Careful not to exceed the 2GB VRAM ;-)
params {
    verbose = true
    max_memory = 8.GB
    max_cpus = 1
    max_gpus = 1
    num_gpus = 1
}

// Include separate guppy options
//includeConfig "./guppy.config"

docker.enabled = true

// Stuff for getting cuda to work :-)
process {
    // Check if GPU enabled. If not, do nothing.
    if(params.num_gpus == 0) {
    }
    else {
        docker.runOptions = "--gpus all -u \$(id -u):\$(id -g)"
    }
}

def check_max(obj, type) {
    if (type == "memory") {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
            return params.max_memory as nextflow.util.MemoryUnit
        else
            return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == "time") {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
            return params.max_time as nextflow.util.Duration
        else
            return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == "cpus") {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == "gpus") {
        try {
            return Math.min( obj, params.max_gpus as int )
    } catch (all) {
        println "   ### ERROR ###   Max gpus '${params.max_gpus}' is not valid! Using default value: $obj"
        return obj as String
        }
    }
}
